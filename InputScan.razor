@using global::Blazor.Bluetooth;
@using Microsoft.Extensions.Logging;
@using System.Text;
@using System.Threading;
@*<input type="text" class="form-control" rows="3" @bind="@(bind)" onchange="@(()=> onScan())" autofocus />*@

<div class="p-0 mb-1 @(PinTop ? "sticky-top" :"")" onkeydown="return event.key != 'Enter';">
    @if (Variant == Variants.RadioButtons)
    {
        <div class="d-flex px-2">
            @foreach (var instruction in Instructions)
            {
                <button type="button" class="btn @(instruction == SelectedInstruction ? (SelectedInstruction?.ButtonSelectedClass ?? "btn-primary") : "btn-outline-secondary") w-100 p-2" style="border-bottom-left-radius: 0; border-bottom-right-radius: 0" @onclick="(()=> SelectInstruction(instruction))"><i class="@instruction.Icon" />&nbsp;@instruction.Title</button>
            }
        </div>
    }
    <div class="input-group">
        <div class="input-group-prepend">
            <button type="button" @ref="scanMethod" class="input-group-text" @onclick="()=> ShowCameraScan = !ShowCameraScan"><i class="fas fa-barcode" />&nbsp;@(string.IsNullOrEmpty(Title) ? "SCAN" : Title)</button>
            @if(BluetoothEnabled)
            {
                <button type="button" class="input-group-text" @onclick="async ()=> await ConnectBluetoothScanner(true)"><i class="fab fa-bluetooth @(IsBluetoothScannerConnected ? "text-primary" : (IsBluetoothScannerConnecting ? "text-warning" : ""))" /></button>
            }  
            @if (KeypadEnabled)
            {
                <button type="button" class="input-group-text" @onclick="async ()=> ToggleKeypad()">
                    <i class="fas fa-keyboard @(KeypadVisible ? "text-success" :  "")" /></button>
            }
        </div>
        <input @ref="scanInput" id="scanInput" type="text" class="form-control text-center" rows="3" @bind="@(ScanValue)" @onkeydown="HandleKeyDown" autofocus />
        @if(KeypadEnabled)
        {
            <div class="input-group-append">
                <button class="btn input-group-text" type="button" @onclick="()=> KeypadBackspace()">
                    <i class="fas fa-backspace" />
                </button>
            </div>
        }
        @if(Variant == Variants.Dropdown)
        {
            <div class="input-group-append">
                <button class="btn input-group-text dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    @if(SelectedInstruction != null)
                    {
                        <i class="@SelectedInstruction.Icon"  />
                    }
                </button>
               <div class="dropdown-menu">
                   @foreach(var instruction in Instructions)
                    {
                        <button type="button" class="btn dropdown-item" @onclick="(()=> SelectInstruction(instruction))"><i class="@instruction.Icon" />&nbsp;@instruction.Title</button>
                    }
                </div>
            </div>
        }
    </div>
    @foreach (var logEntry in ScanLog.Reverse())
    {
        <div class="m-1 alert alert-@(GetScanLogLevel(logEntry)) d-flex" role="alert">
            @if(Result != null)
            {
                @Result(logEntry)
            }
            else
            {
                @logEntry.ToString()
            }            
        </div>
    }

    @if (KeypadEnabled && KeypadVisible)
    {
        <div class="m-1 alert alert-info d-flex" role="alert">
            <div class="row mx-auto" style="max-width:400px">

                @for (int keyIndex = 1; keyIndex < 13; keyIndex++)
                {
                    var key = GetKeyAtIndex(keyIndex);

                    <div class="col-4">
                        <button class="btn btn-outline-primary w-100 p-3 m-2 font-weight-bold" style="font-size: 1.5rem" @onclick="()=> KeyPress(key)">
                            @(key)
                        </button>
                    </div>
                }

                <div class="col-12">
                    <button class="btn btn-outline-primary w-100 p-3 m-2 font-weight-bold" style="font-size: 1.5rem" @onclick="()=> KeyPress(Environment.NewLine)">
                        ENTER
                    </button>
                </div>
            </div>
        </div>
    }

    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>    
</div>

@if (SelectedInstruction?.ChildContent != null)
{
    @SelectedInstruction.ChildContent
}



@*@if(ShowCameraScan)
{
    <BarcodeReader ScanResult="((e) => { ScanValue=e; ShowCameraScan=false;})"
                           Close="(()=>ShowCameraScan=!ShowCameraScan)"
                           OnError="OnCameraError"
                           ScanBtnTitle="SCAN"
                           ResetBtnTitle="RESET"
                           CloseBtnTitle="CLOSE"
                           SelectDeviceBtnTitle="Select Camera"
                           />
}*@


<Audio @ref="successSound" Source="./_content/Oarw.Blazor.InputScan/audio/SuccessSoundFX.mp3" />
<Audio @ref="failSound" Source="./_content/Oarw.Blazor.InputScan/audio/FailSoundFX.mp3" />
<Audio @ref="addSound" Source="./_content/Oarw.Blazor.InputScan/audio/AddSoundFX.mp3" />
<Audio @ref="excessSound" Source="./_content/Oarw.Blazor.InputScan/audio/AddSoundFX.mp3" />
<Audio @ref="completeSound" Source="./_content/Oarw.Blazor.InputScan/audio/CompleteSoundFX.mp3" />

